# Generated by Django 4.2.5 on 2023-10-27 03:59

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User, Group, Permission
from django.contrib.contenttypes.models import ContentType

# Define a function to create or update groups based on the user's role
def update_user_groups(sender, instance, **kwargs):
    if kwargs.get('created', False):
        # User is created
        user = instance
        if user.user_type == 'student':
            student_group, created1 = Group.objects.get_or_create(name='student')
            student_group.user_set.add(user)
        elif user.user_type == 'teacher':
            teacher_group, created2 = Group.objects.get_or_create(name='teacher')
            teacher_group.user_set.add(user)
        elif user.user_type == 'admin':
            admin_group, created3 = Group.objects.get_or_create(name='admin')
            admin_group.user_set.add(user)

# Connect the function to the post_save signal for the User model
@receiver(post_save, sender=User)
def user_post_save(sender, instance, **kwargs):
    update_user_groups(sender, instance, **kwargs)


def create_custom_permission(codename, name, content_type):
    try:
        permission = Permission.objects.get(codename=codename, content_type=content_type)
    except Permission.DoesNotExist:
        permission = Permission.objects.create(codename=codename, name=name, content_type=content_type)
    return permission

# Define a content type for the model
content_type_model_user = ContentType.objects.get_for_model(User)

# Create custom permissions if they don't exist
permission1 = create_custom_permission('view', 'Can view user', content_type_model_user)
permission2 = create_custom_permission('recommend', 'Can recommend user', content_type_model_user)
permission3 = create_custom_permission('edit', 'Can edit user', content_type_model_user)

# Create groups
student_group, created1 = Group.objects.get_or_create(name='student')
teacher_group, created2 = Group.objects.get_or_create(name='teacher')
admin_group, created3 = Group.objects.get_or_create(name='admin')

# Assign permissions to groups
student_group.permissions.add(permission1)
teacher_group.permissions.add(permission1, permission2)
admin_group.permissions.add(permission1, permission2, permission3)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    USER_TYPES = [
        ('student', 'Student'),
        ('teacher', 'Teacher'),
        ('admin', 'Admin'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('author', models.CharField(max_length=100)),
                ('isbn', models.IntegerField(default=0)),
                ('year', models.IntegerField()),
                ('publisher', models.CharField(max_length=100)),
                ('copies', models.IntegerField()),
                ('available', models.IntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='static\\images')),
            ],
        ),

        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=20)),
                ('password', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=40)),
                ('email', models.EmailField(max_length=254)),
                ('user_type', models.CharField(max_length=10, choices=USER_TYPES)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_name', models.CharField(max_length=100, unique=True)),
                ('book', models.ManyToManyField(null=True, to='Richmond_Library_App.book')),
            ],
        ),
        migrations.CreateModel(
            name='BooksToUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Richmond_Library_App.book')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
